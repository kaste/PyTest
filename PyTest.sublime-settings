{
    // Point to your py.test executable
    // usually use the one from your virtualenv
    // e.g. "~/venvs/{project_base}/scripts/py.test"
    // use a list for a command line e.g ["poetry","run","pytest"]
    "pytest": "pytest",

    // supported tb modes are: line, short, long, auto
    // show-locals via -l
    "options": "--tb=auto -l",

    // Usually your project_path (which is the first folder in your project
    // settings)
    "working_dir": "${folder}",

    // Where your tests are located, often you can leave this blank because
    // pytest will find your tests anyway. Otherwise usually below the
    // `working_dir`, so use a relative path, e.g. "tests" or "foo/tests"
    "target": "",

    // "auto": Automatically run your tests after saving a file
    // "manual": Use commands and key bindings to run tests at your will
    "mode": "auto",

    // false: Do not save, before running tests
    // true: Save current file before running tests
    // 'all': Save all unsaved files. (Usually this gets in your way when you
    // have new 'untitled' views open.)
    "save_before_test": false,

    // Show inline annotations after a red test run. If false, you can still
    // toggle these annotations by invoking the `pytest_toggle_phantoms`
    // command
    "show_phantoms": true,

    // Show the usual pytest output in a panel after a red test run. If false,
    // you can still show/hide this panel by invoking the `pytest_toggle_panel`
    // command
    "open_panel_on_failures": false,

    // Set this to false, if you applied your tweaks manually, or just
    // don't want them
    "apply_theme_tweaks": true,

    "file_regex": "^(.*):([0-9]+):(.)([\\w ]*)$",

    // Set environment variables here if needed
    // e.g. {"LC_ALL":"en_US.utf-8", "LANG":"en_US.utf-8"}
    "env" : {}

}
